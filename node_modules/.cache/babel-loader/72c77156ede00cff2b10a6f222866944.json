{"ast":null,"code":"var _jsxFileName = \"/Users/zim/WORK/GIT-REPOS/JAVASCRIPT/REACT/assets/SANDPIT/CRA/omni/src/components/TodoForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { API_URL } from '../config';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { Button, Checkbox, Box, InputLabel, Fab, FormControlLabel, FormGroup, TextField, Typography } from '@material-ui/core';\nimport AddIcon from \"@material-ui/icons/Add\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  margin: {\n    margin: theme.spacing(1)\n  },\n  withoutLabel: {\n    marginTop: theme.spacing(3)\n  },\n  textField: {\n    width: '25ch'\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  form: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    outline: 'none',\n    padding: theme.spacing(2, 4, 3),\n    width: '100%'\n  },\n  imagecard: {\n    maxWidth: '100px',\n    padding: '0px 24px 0px 0px'\n  },\n  hide: {\n    display: 'none'\n  },\n  inputAddImageLabel: {\n    margin: '0px 24px 0px 0px'\n  },\n  inputAddImageWrapper: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    padding: '0px 0px 24px 0px'\n  }\n}));\n\nfunction TodoForm(props) {\n  //console.log(props);\n  const classes = useStyles(); // const [Id, setId] = useState(null);\n\n  const [Id, setId] = useState(Math.floor(Math.random() * 10000)); // Create input state\n\n  const [inputTitle, setInputTitle] = useState(\"\");\n\n  const handleChangeTitle = e => {\n    //console.log(e.target.value);\n    setInputTitle(e.target.value);\n  };\n\n  const [inputDescription, setInputDescription] = useState(\"\");\n\n  const handleChangeDescription = e => {\n    //console.log(e.target.value);\n    setInputDescription(e.target.value);\n  };\n\n  const [inputComplete, setInputComplete] = useState(false);\n\n  const handleChangeComplete = e => {\n    //console.log(e.target.checked);\n    setInputComplete(e.target.checked);\n  }; // const [formdata, setFormdata] = useState([]);\n\n\n  const today = new Date();\n  const dateToday = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n  const [inputDueDate, setInputDueDate] = useState(dateToday);\n\n  const handleChangeDueDate = e => {\n    setInputDueDate(e.target.value);\n  }; // const [inputImages, setInputImages] = useState([]);\n\n\n  const [errorFetch, setErrorFetch] = useState(false);\n  const [imagePath, setImagePath] = useState('');\n\n  const handleChangeImage = e => {\n    const errs = [];\n    const files = Array.from(e.target.files);\n    const formData = new FormData();\n    const types = ['image/png', 'image/jpeg', 'image/gif'];\n    const tmpArray = [];\n    files.forEach((file, i) => {\n      if (types.every(type => file.type !== type)) {\n        errs.push(`'${file.type}' is not a supported format`);\n      }\n\n      if (file.size > 150000) {\n        errs.push(`'${file.name}' is too large, please pick a smaller file`);\n      }\n\n      formData.append(i, file);\n      tmpArray.push(file);\n    }); // setFormdata(tmpArray);\n\n    fetch(`${API_URL}/image-upload`, {\n      method: 'POST',\n      body: formData\n    }).then(res => {\n      if (!res.ok) {\n        throw res;\n      }\n\n      return res.json();\n    }).then(inputImages => {\n      setInputImages(inputImages);\n      setImagePath(inputImages[0].secure_url);\n    }).catch(err => {});\n  };\n\n  useEffect(() => {\n    if (props.editId == null) {} else {\n      const result = props.todos.filter(todo => todo.id === props.editId);\n      setId(result[0].id);\n      setInputTitle(result[0].title);\n      setInputDueDate(result[0].dueDate);\n      setInputDescription(result[0].description);\n      setInputComplete(result[0].complete);\n      setImagePath(result[0].imagePath);\n      setImageNew(false);\n    }\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (props.editId == null) {\n      props.onSubmit({\n        id: Id,\n        title: inputTitle,\n        description: inputDescription,\n        dueDate: inputDueDate,\n        complete: inputComplete,\n        imagePath: imagePath\n      });\n      setInputTitle(\"\");\n      setInputDescription(\"\");\n      setInputDueDate(null);\n      setInputComplete([0]);\n      setImagePath('');\n      props.onClose();\n    } else {\n      props.editTodo(Id, inputTitle, inputDescription, inputDueDate, inputComplete, imagePath);\n      props.setEdit();\n      props.onClose();\n    }\n  };\n\n  const [imageNew, setImageNew] = useState(true); // const About = (props) => {\n\n  const UploadImageCtaText = e => {\n    if (imageNew) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }\n      }, \"Upload Image\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 17\n        }\n      }, \"Change Image\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    autoComplete: \"off\",\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, \"Add Todo Form\"), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"input-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"input-title\",\n    placeholder: \"Title\",\n    fullWidth: true,\n    margin: \"normal\",\n    variant: \"outlined\",\n    value: inputTitle,\n    onChange: handleChangeTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"input-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 21\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"input-description\",\n    fullWidth: true,\n    margin: \"normal\",\n    multiline: true,\n    onChange: handleChangeDescription,\n    placeholder: \"Description\",\n    rows: 3,\n    value: inputDescription,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"input-due-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 21\n    }\n  }, \"Due Date\"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"input-due-date\",\n    type: \"date\",\n    margin: \"normal\",\n    onChange: handleChangeDueDate,\n    value: inputDueDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"complete\",\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      onChange: handleChangeComplete,\n      color: \"primary\",\n      checked: inputComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 34\n      }\n    }),\n    label: \"Complete\",\n    labelPlacement: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    className: classes.inputAddImageWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: imagePath,\n    alt: \"\",\n    className: clsx(classes.imagecard, imageNew && classes.hide),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"icon-button-file\",\n    className: clsx(classes.inputAddImageLabel, false && classes.hide),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Fab, {\n    color: \"secondary\",\n    size: \"small\",\n    component: \"span\",\n    \"aria-label\": \"add\",\n    variant: \"extended\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 33\n    }\n  }), \" \", /*#__PURE__*/React.createElement(UploadImageCtaText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 45\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => props.removeImage(Id),\n    className: clsx(classes.delete, true && classes.hide),\n    className: clsx(imageNew && classes.hide),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 25\n    }\n  }, \"Remove image\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    className: clsx(!errorFetch && classes.hide),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 25\n    }\n  }, \"Failed to fetch. This propvbaly means the dev server is not running. See Read me\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    color: \"primary\",\n    accept: \"image/*\",\n    type: \"file\",\n    onChange: handleChangeImage,\n    id: \"icon-button-file\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 21\n    }\n  }, \"add todo\"))));\n}\n\nexport default TodoForm;","map":{"version":3,"sources":["/Users/zim/WORK/GIT-REPOS/JAVASCRIPT/REACT/assets/SANDPIT/CRA/omni/src/components/TodoForm.js"],"names":["React","useState","useEffect","API_URL","makeStyles","clsx","Button","Checkbox","Box","InputLabel","Fab","FormControlLabel","FormGroup","TextField","Typography","AddIcon","useStyles","theme","root","display","flexWrap","margin","spacing","withoutLabel","marginTop","textField","width","modal","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","form","outline","imagecard","maxWidth","hide","inputAddImageLabel","inputAddImageWrapper","TodoForm","props","classes","Id","setId","Math","floor","random","inputTitle","setInputTitle","handleChangeTitle","e","target","value","inputDescription","setInputDescription","handleChangeDescription","inputComplete","setInputComplete","handleChangeComplete","checked","today","Date","dateToday","getFullYear","getMonth","getDate","inputDueDate","setInputDueDate","handleChangeDueDate","errorFetch","setErrorFetch","imagePath","setImagePath","handleChangeImage","errs","files","Array","from","formData","FormData","types","tmpArray","forEach","file","i","every","type","push","size","name","append","fetch","method","body","then","res","ok","json","inputImages","setInputImages","secure_url","catch","err","editId","result","todos","filter","todo","id","title","dueDate","description","complete","setImageNew","handleSubmit","preventDefault","onSubmit","onClose","editTodo","setEdit","imageNew","UploadImageCtaText","removeImage","delete"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { API_URL } from '../config';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { Button, Checkbox, Box, InputLabel, Fab, FormControlLabel, FormGroup, TextField, Typography } from '@material-ui/core';\n\nimport AddIcon from \"@material-ui/icons/Add\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    withoutLabel: {\n        marginTop: theme.spacing(3),\n    },\n    textField: {\n        width: '25ch',\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n    form: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        outline: 'none',\n        padding: theme.spacing(2, 4, 3),\n        width: '100%',\n    },\n    imagecard: {\n        maxWidth: '100px',\n        padding: '0px 24px 0px 0px',\n    },\n    hide: {\n        display: 'none',\n    },\n    inputAddImageLabel: {\n        margin: '0px 24px 0px 0px',\n    },\n    inputAddImageWrapper: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        padding: '0px 0px 24px 0px',\n    },\n}));\n\n\nfunction TodoForm(props) {\n\n    //console.log(props);\n    const classes = useStyles();\n\n    // const [Id, setId] = useState(null);\n    const [Id, setId] = useState(Math.floor(Math.random() * 10000));\n\n    // Create input state\n    const [inputTitle, setInputTitle] = useState(\"\");\n    const handleChangeTitle = (e) => {\n        //console.log(e.target.value);\n        setInputTitle(e.target.value);\n    };\n\n    const [inputDescription, setInputDescription] = useState(\"\");\n    const handleChangeDescription = (e) => {\n        //console.log(e.target.value);\n        setInputDescription(e.target.value);\n    };\n\n    const [inputComplete, setInputComplete] = useState(false);\n    const handleChangeComplete = (e) => {\n        //console.log(e.target.checked);\n        setInputComplete(e.target.checked);\n    };\n\n    // const [formdata, setFormdata] = useState([]);\n\n    const today = new Date();\n\n    const dateToday = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n\n    const [inputDueDate, setInputDueDate] = useState(dateToday);\n\n    const handleChangeDueDate = (e) => {\n        setInputDueDate(e.target.value);\n    };\n\n    // const [inputImages, setInputImages] = useState([]);\n\n    const [errorFetch, setErrorFetch] = useState(false);\n\n    const [imagePath, setImagePath] = useState('');\n\n    const handleChangeImage = (e) => {\n\n        const errs = []\n        const files = Array.from(e.target.files);\n\n        const formData = new FormData();\n        const types = ['image/png', 'image/jpeg', 'image/gif'];\n        const tmpArray = [];\n\n        files.forEach((file, i) => {\n\n            if (types.every(type => file.type !== type)) {\n                errs.push(`'${file.type}' is not a supported format`)\n            }\n\n            if (file.size > 150000) {\n                errs.push(`'${file.name}' is too large, please pick a smaller file`)\n            }\n\n            formData.append(i, file);\n            tmpArray.push(file);\n        })\n\n        // setFormdata(tmpArray);\n\n        fetch(`${API_URL}/image-upload`, {\n            method: 'POST',\n            body: formData\n        })\n            .then(res => {\n                if (!res.ok) {\n                    throw res\n                }\n                return res.json()\n            })\n            .then(inputImages => {\n                setInputImages(inputImages);\n                setImagePath(inputImages[0].secure_url);\n            })\n            .catch(err => {\n\n            })\n    };\n\n    useEffect(() => {\n\n        if (props.editId == null) {\n\n        } else {\n\n            const result = props.todos.filter(todo => todo.id === props.editId);\n\n            setId(result[0].id);\n            setInputTitle(result[0].title);\n            setInputDueDate(result[0].dueDate);\n            setInputDescription(result[0].description);\n            setInputComplete(result[0].complete);\n            setImagePath(result[0].imagePath);\n            setImageNew(false);\n\n        }\n\n    }, []);\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (props.editId == null) {\n\n            props.onSubmit({\n                id: Id,\n                title: inputTitle,\n                description: inputDescription,\n                dueDate: inputDueDate,\n                complete: inputComplete,\n                imagePath: imagePath\n            });\n            setInputTitle(\"\");\n            setInputDescription(\"\");\n            setInputDueDate(null);\n            setInputComplete([0]);\n            setImagePath('');\n\n            props.onClose();\n\n        } else {\n            props.editTodo(Id, inputTitle, inputDescription, inputDueDate, inputComplete, imagePath);\n            props.setEdit();\n            props.onClose();\n        }\n\n    };\n\n    const [imageNew, setImageNew] = useState(true);\n\n    // const About = (props) => {\n    const UploadImageCtaText = e => {\n\n        if (imageNew) {\n            return (\n                <span>\n                    Upload Image\n                </span>\n            );\n        } else {\n            return (\n                <span>\n                    Change Image\n                </span>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment >\n            <form onSubmit={handleSubmit} noValidate autoComplete=\"off\" className={classes.form}>\n                <Typography variant='h3'>\n                    Add Todo Form\n                </Typography>\n                <FormGroup>\n                    <InputLabel htmlFor=\"input-title\">Title</InputLabel>\n                    <TextField\n                        id=\"input-title\"\n                        placeholder=\"Title\"\n                        fullWidth\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={inputTitle}\n                        onChange={handleChangeTitle}\n                    />\n                    <InputLabel htmlFor=\"input-description\">Description</InputLabel>\n                    <TextField\n                        id=\"input-description\"\n                        fullWidth\n                        margin=\"normal\"\n                        multiline={true}\n                        onChange={handleChangeDescription}\n                        placeholder=\"Description\"\n                        rows={3}\n                        value={inputDescription}\n                        variant=\"outlined\"\n                    />\n                    <InputLabel htmlFor=\"input-due-date\">Due Date</InputLabel>\n                    <TextField\n                        id=\"input-due-date\"\n\n                        type=\"date\"\n                        margin=\"normal\"\n                        onChange={handleChangeDueDate}\n                        value={inputDueDate}\n                    />\n                    <FormControlLabel\n                        value=\"complete\"\n                        control={<Checkbox onChange={handleChangeComplete} color=\"primary\" checked={inputComplete} />}\n                        label=\"Complete\"\n                        labelPlacement=\"start\"\n                    />\n                    <Box className={classes.inputAddImageWrapper}>\n                        <img\n                            src={imagePath}\n                            alt=''\n                            className={clsx(classes.imagecard, imageNew && classes.hide)}\n\n                        />\n                        <InputLabel htmlFor='icon-button-file' className={clsx(classes.inputAddImageLabel, false && classes.hide)} >\n                            <Fab\n                                color=\"secondary\"\n                                size=\"small\"\n                                component=\"span\"\n                                aria-label=\"add\"\n                                variant=\"extended\"\n                            >\n                                <AddIcon /> <UploadImageCtaText />\n                            </Fab>\n                        </InputLabel>\n                        <Button\n                            variant=\"contained\" color=\"primary\"\n                            onClick={() => props.removeImage(Id)}\n                            className={clsx(classes.delete, true && classes.hide)}\n                            className={clsx(imageNew && classes.hide)}\n                        >Remove image</Button>\n                        <Typography variant=\"body1\" className={clsx(!errorFetch && classes.hide)}>Failed to fetch. This propvbaly means the dev server is not running. See Read me</Typography>\n                        <input\n                            style={{ display: \"none\" }}\n                            color=\"primary\"\n                            accept=\"image/*\"\n                            type=\"file\"\n                            onChange={handleChangeImage}\n                            id=\"icon-button-file\"\n                            margin=\"normal\"\n\n                            variant=\"outlined\"\n                        />\n                    </Box>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>add todo</Button>\n                </FormGroup>\n            </form>\n        </React.Fragment>\n    );\n}\n\nexport default TodoForm;\n"]},"metadata":{},"sourceType":"module"}