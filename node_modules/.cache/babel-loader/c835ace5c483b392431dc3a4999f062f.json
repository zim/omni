{"ast":null,"code":"var _jsxFileName = \"/Users/zim/WORK/GIT-REPOS/JAVASCRIPT/REACT/assets/SANDPIT/CRA/omni-todo-app/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Routes } from './routes'; // where we are going to specify our routes\n\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TodoList from './components/TodoList';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport NavBar from './components/NavBar'; // const toastColor = {\n//   background: '#505050',\n//   text: '#fff'\n// }\n// state = {\n//   loading: true,\n//   uploading: false,\n//   images: []\n// }\n// componentDidMount() {\n//   fetch(`${API_URL}/wake-up`)\n//     .then(res => {\n//       if (res.ok) {\n//         return this.setState({ loading: false })\n//       }\n//       const msg = 'Something is went wrong with Heroku'\n//       this.toast(msg, 'custom', 2000, toastColor)\n//     })\n// }\n// toast = notify.createShowQueue()\n// import { API_URL } from './config';\n// onChange = e => {\n//   const errs = []\n//   const files = Array.from(e.target.files)\n//   if (files.length > 3) {\n//     const msg = 'Only 3 images can be uploaded at a time'\n//     return this.toast(msg, 'custom', 2000, toastColor)\n//   }\n//   const formData = new FormData()\n//   const types = ['image/png', 'image/jpeg', 'image/gif']\n//   files.forEach((file, i) => {\n//     if (types.every(type => file.type !== type)) {\n//       errs.push(`'${file.type}' is not a supported format`)\n//     }\n//     if (file.size > 150000) {\n//       errs.push(`'${file.name}' is too large, please pick a smaller file`)\n//     }\n//     formData.append(i, file)\n//   })\n//   if (errs.length) {\n//     return errs.forEach(err => this.toast(err, 'custom', 2000, toastColor))\n//   }\n//   this.setState({ uploading: true })\n//   fetch(`${API_URL}/image-upload`, {\n//     method: 'POST',\n//     body: formData\n//   })\n//     .then(res => {\n//       if (!res.ok) {\n//         throw res\n//       }\n//       return res.json()\n//     })\n//     .then(images => {\n//       this.setState({\n//         uploading: false,\n//         images\n//       })\n//     })\n//     .catch(err => {\n//       err.json().then(e => {\n//         this.toast(e.message, 'custom', 2000, toastColor)\n//         this.setState({ uploading: false })\n//       })\n//     })\n// }\n// filter = id => {\n//   return this.state.images.filter(image => image.public_id !== id)\n// }\n// removeImage = id => {\n//   this.setState({ images: this.filter(id) })\n// }\n// onError = id => {\n//   this.toast('Oops, something went wrong', 'custom', 2000, toastColor)\n//   this.setState({ images: this.filter(id) })\n// }\n// render() {\n//   const { loading, uploading, images } = this.state\n//   const content = () => {\n//     switch (true) {\n//       case loading:\n//         return <WakeUp />\n//       case uploading:\n//         return <Spinner />\n//       case images.length > 0:\n//         return <Images\n//           images={images}\n//           removeImage={this.removeImage}\n//           onError={this.onError}\n//         />\n//       default:\n//         return <Buttons onChange={this.onChange} />\n//     }\n//   }\n//   return (\n//     <div className='container'>\n//       <Notifications />\n//       <div className='buttons'>\n//         {content()}\n//       </div>\n//       <Footer />\n//     </div>\n//   )\n// }\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zim/WORK/GIT-REPOS/JAVASCRIPT/REACT/assets/SANDPIT/CRA/omni-todo-app/src/App.js"],"names":["React","BrowserRouter","Router","Routes","Container","Button","Box","makeStyles","Paper","Grid","TodoList","NavBar","useStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","classes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,SAASC,MAAT,QAAuB,UAAvB,C,CAAmC;;AAEnC,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,OAAOC,QAAP,MAAqB,uBAArB;;AAIA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GADiC;AAIvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd,CADJ;AAELC,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,KAAK,EAAEP,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmBC;AAHrB;AAJgC,CAAZ,CAAD,CAA5B;;AAWA,SAASC,GAAT,GAAe;AAEb,QAAMC,OAAO,GAAGb,SAAS,EAAzB;AAEA,sBAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CAHJ;AAcD;;AAED,eAAeY,GAAf","sourcesContent":["import React from 'react';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Routes } from './routes'; // where we are going to specify our routes\n\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport TodoList from './components/TodoList';\n\n\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBar from './components/NavBar';\n\n\n// const toastColor = {\n//   background: '#505050',\n//   text: '#fff'\n// }\n\n// state = {\n//   loading: true,\n//   uploading: false,\n//   images: []\n// }\n\n// componentDidMount() {\n//   fetch(`${API_URL}/wake-up`)\n//     .then(res => {\n//       if (res.ok) {\n//         return this.setState({ loading: false })\n//       }\n//       const msg = 'Something is went wrong with Heroku'\n//       this.toast(msg, 'custom', 2000, toastColor)\n//     })\n// }\n\n// toast = notify.createShowQueue()\n\n// import { API_URL } from './config';\n\n// onChange = e => {\n//   const errs = []\n//   const files = Array.from(e.target.files)\n\n//   if (files.length > 3) {\n//     const msg = 'Only 3 images can be uploaded at a time'\n//     return this.toast(msg, 'custom', 2000, toastColor)\n//   }\n\n//   const formData = new FormData()\n//   const types = ['image/png', 'image/jpeg', 'image/gif']\n\n//   files.forEach((file, i) => {\n\n//     if (types.every(type => file.type !== type)) {\n//       errs.push(`'${file.type}' is not a supported format`)\n//     }\n\n//     if (file.size > 150000) {\n//       errs.push(`'${file.name}' is too large, please pick a smaller file`)\n//     }\n\n//     formData.append(i, file)\n//   })\n\n//   if (errs.length) {\n//     return errs.forEach(err => this.toast(err, 'custom', 2000, toastColor))\n//   }\n\n//   this.setState({ uploading: true })\n\n//   fetch(`${API_URL}/image-upload`, {\n//     method: 'POST',\n//     body: formData\n//   })\n//     .then(res => {\n//       if (!res.ok) {\n//         throw res\n//       }\n//       return res.json()\n//     })\n//     .then(images => {\n//       this.setState({\n//         uploading: false,\n//         images\n//       })\n//     })\n//     .catch(err => {\n//       err.json().then(e => {\n//         this.toast(e.message, 'custom', 2000, toastColor)\n//         this.setState({ uploading: false })\n//       })\n//     })\n// }\n\n// filter = id => {\n//   return this.state.images.filter(image => image.public_id !== id)\n// }\n\n// removeImage = id => {\n//   this.setState({ images: this.filter(id) })\n// }\n\n// onError = id => {\n//   this.toast('Oops, something went wrong', 'custom', 2000, toastColor)\n//   this.setState({ images: this.filter(id) })\n// }\n\n// render() {\n//   const { loading, uploading, images } = this.state\n\n//   const content = () => {\n//     switch (true) {\n//       case loading:\n//         return <WakeUp />\n//       case uploading:\n//         return <Spinner />\n//       case images.length > 0:\n//         return <Images\n//           images={images}\n//           removeImage={this.removeImage}\n//           onError={this.onError}\n//         />\n//       default:\n//         return <Buttons onChange={this.onChange} />\n//     }\n//   }\n\n//   return (\n//     <div className='container'>\n//       <Notifications />\n//       <div className='buttons'>\n//         {content()}\n//       </div>\n//       <Footer />\n//     </div>\n//   )\n// }\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return (\n  \n\n      <Router>\n        <NavBar />\n\n        <Container maxWidth=\"lg\">\n          <Routes />\n        </Container>\n\n      </Router>\n\n   \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}